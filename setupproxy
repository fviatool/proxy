#!/bin/bash

# Hàm để kiểm tra IPv6 của card mạng
checkIPv6() {
    if [[ -z "$(ip addr show dev $network_card | grep inet6)" ]]; then
        echo "Không tìm thấy địa chỉ IPv6 cho card mạng $network_card."
        exit 1
    fi
}

# Hàm để kiểm tra card mạng
checkNetworkCard() {
    if [[ -z "$network_card" ]]; then
        echo "Không tìm thấy card mạng phù hợp."
        exit 1
    fi
}

# Hàm để lấy card mạng tự động
get_network_card() {
    network_card=$(ip -o link show | awk '$2 !~ "lo|vir|wl" {print $2}' | cut -d: -f1 | head -1)
}

# Hàm để xoay IPv6 tự động sau mỗi 10 phút
rotate_ipv6() {
    while true; do
        echo "Rotating IPv6..."
        IP6=$(curl -6 -s icanhazip.com | cut -f1-4 -d':')
        echo "New IPv6: $IP6"
        gen_data >$WORKDIR/data.txt
        gen_3proxy >/usr/local/etc/3proxy/3proxy.cfg
        sleep 600 # Wait for 10 minutes before rotating again
    done
}

# Hàm để kiểm tra IPv6 của card mạng và card mạng trước khi chạy
preCheck() {
    checkNetworkCard
    get_network_card
    checkIPv6
}

# Hàm để cài đặt 3proxy
install_3proxy() {
    echo "installing 3proxy"
    URL="https://github.com/z3APA3A/3proxy/archive/3proxy-0.8.6.tar.gz"
    wget -qO- $URL | bsdtar -xvf-
    cd 3proxy-3proxy-0.8.6
    make -f Makefile.Linux
    mkdir -p /usr/local/etc/3proxy/{bin,logs,stat}
    cp src/3proxy /usr/local/etc/3proxy/bin/
    cd $WORKDIR
}

# Hàm để tạo file proxy.txt cho người dùng
gen_proxy_file_for_user() {
    cat >proxy.txt <<EOF
$(awk -F "/" '{print $3 ":" $4 ":" $1 ":" $2 }' ${WORKDATA})
EOF
}

# Hàm để cài đặt ứng dụng cần thiết
installApps() {
    echo "installing apps"
    yum -y install wget gcc net-tools bsdtar zip >/dev/null
}

# Hàm để tạo dữ liệu proxy
gen_data() {
    seq $FIRST_PORT $LAST_PORT | while read port; do
        echo "//$IP4/$port/$(gen64 $IP6)"
    done
}

# Hàm để tạo iptables
gen_iptables() {
    cat <<EOF
$(awk -F "/" '{print "iptables -I INPUT -p tcp --dport " $4 "  -m state --state NEW -j ACCEPT"}' ${WORKDATA}) 
EOF
}

# Hàm để tạo ifconfig
gen_ifconfig() {
    cat <<EOF
$(awk -F "/" '{print "ifconfig $network_card inet6 add " $5 "/64"}' ${WORKDATA})
EOF
}

# Hàm để tạo cấu hình cho 3proxy
gen_3proxy() {
    cat <<EOF
daemon
maxconn 2000
nserver 1.1.1.1
nserver 8.8.4.4
nserver 2001:4860:4860::8888
nserver 2001:4860:4860::8844
nscache 65536
timeouts 1 5 30 60 180 1800 15 60
setgid 65535
setuid 65535
stacksize 6291456 
flush

$(awk -F "/" '{print "\n" \
"" $1 "\n" \
"proxy -6 -n -a -p" $4 " -i" $3 " -e"$5"\n" \
"flush\n"}' ${WORKDATA})
EOF
}

# Cấu hình rc.local
config_rclocal() {
    cat << EOF > /etc/rc.d/rc.local
#!/bin/bash
touch /var/lock/subsys/local
EOF
}

# Chạy script cài đặt
setup() {
    preCheck
    installApps
    install_3proxy
    config_rclocal

    echo "working folder = /home/cloudfly"
    WORKDIR="/home/cloudfly"
    WORKDATA="${WORKDIR}/data.txt"
    mkdir $WORKDIR && cd $_

    IP4=$(curl -4 -s icanhazip.com)
    IP6=$(curl -6 -s icanhazip.com | cut -f1-4 -d':')

    echo "Internal ip = ${IP4}. Exteranl sub for ip6 = ${IP6}"

    # Generate random ports
    while :; do
      FIRST_PORT=$(($(od -An -N2 -i /dev/urandom) % 80001 + 10000))
      if [[ $FIRST_PORT =~ ^[0-9]+$ ]] && ((FIRST_PORT >= 10000 && FIRST_PORT <= 80000)); then
        echo "Random ports generated successfully!"
        LAST_PORT=$((FIRST_PORT + 999))
        echo "LAST_PORT is $LAST_PORT. Continuing..."
        break
      else
        echo "Failed to generate random ports. Retrying..."
      fi
    done

    gen_data >$WORKDIR/data.txt
    gen_iptables >$WORKDIR/boot_iptables.sh
    gen_ifconfig >$WORKDIR/boot_ifconfig.sh
    chmod +x boot_*.sh /etc/rc.local

    gen_3proxy >/usr/local/etc/3proxy/3proxy.cfg

    cat >>/etc/rc.local <<EOF
bash ${WORKDIR}/boot_iptables.sh
bash ${WORKDIR}/boot_ifconfig.sh
ulimit -n 10048
/usr/local/etc/3proxy/bin/3proxy /usr/local/etc/3proxy/3proxy.cfg
EOF

    rotate_ipv6 & # Start rotating IPv6 in the background

    bash /etc/rc.local

    gen_proxy_file_for_user
    rm -rf /root/3proxy-3proxy-0.8.6

    echo "Starting Proxy"
    checkIPv6

    download_proxy
}

setup
